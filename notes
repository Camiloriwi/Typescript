// usar npm init
// usar touch para crear un nuevo archivo 

// instanciar  un clase es crear un objecto apartir de la clase

// usar una clase  cuando esta  se vaya utilizar mas de un ves 

// los tipos no contienen metodos

// las interfaces no pueden ser instanciables 

// y las clases pueden contener tanto metodos  como tambien pueden ser instanciadas

// declarar una variable toda en mayuscula se puede hacer cuando no quiero que esta cambie   ni se pueda modificar



// {
//   "compilerOptions": {
//       "strict": true,
//       "target": "ES2022",
//       "module": "CommonJS",
//       "sourceMap": true,
//       "forceConsistentCasingInFileNames": true,
//   }
// }

//se pueden utilizar estas otras versiones de ECMAScript   es6/es2015, es2016, es2017, es2018, es2019, es2020, es2021, es2022, esnext


Clases y objetos:

    En JavaScript, el encapsulamiento se logra mediante el uso de clases y objetos.
    Una clase es una plantilla para crear objetos, mientras que los objetos son instancias de una clase.
    Dentro de una clase, los métodos y las propiedades se definen y encapsulan.




Propiedades privadas:

    Para lograr el encapsulamiento, es común utilizar una convención de nomenclatura para denotar que una propiedad es privada.
    Por ejemplo, se puede utilizar un guión bajo (_) como prefijo del nombre de la propiedad para indicar que es privada.



// Métodos de acceso:

    Los métodos set y get se utilizan para acceder y modificar propiedades privadas.
    El método set permite asignar un nuevo valor a la propiedad y también puede validar que cumpla con ciertos requerimientos.
    El método get se utiliza para obtener el valor de la propiedad.






Propiedades y métodos públicos:

    Las propiedades y métodos públicos son accesibles desde cualquier lugar en el código.
    Forman parte de la interfaz externa de una clase y pueden ser utilizados tanto desde dentro como desde fuera de la clase1.



Propiedades y métodos privados:

    Las propiedades y métodos privados solo son accesibles desde dentro de la clase en la que están definidos1.
    En JavaScript, no hay una sintaxis específica para declarar propiedades o métodos como privados. Sin embargo, podemos utilizar una convención de nomenclatura para indicar que son privados.



Aunque JavaScript no tiene una palabra clave específica para propiedades o métodos protegidos, podemos utilizar la convención de prefijar con un guión bajo para indicar que son protegidos.
Las propiedades o métodos protegidos son accesibles desde dentro de la clase y también desde las clases que heredan directamente de ella2.